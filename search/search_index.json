{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HerePy \u00b6 Documentation : https://abdullahselek.github.io/HerePy Source Code : https://github.com/abdullahselek/HerePy This library provides a pure Python interface for the HERE API . It works with Python versions 3.x. HERE provides location based services. HERE exposes rest APIs and this library is intended to make it even easier for Python programmers to use. Available clients are: Destination Weather API Geocoder API Geocoder Autocomplete API Places API Public Transit API Fleet Telematics Route Matching API Routing API","title":"HerePy"},{"location":"#herepy","text":"Documentation : https://abdullahselek.github.io/HerePy Source Code : https://github.com/abdullahselek/HerePy This library provides a pure Python interface for the HERE API . It works with Python versions 3.x. HERE provides location based services. HERE exposes rest APIs and this library is intended to make it even easier for Python programmers to use. Available clients are: Destination Weather API Geocoder API Geocoder Autocomplete API Places API Public Transit API Fleet Telematics Route Matching API Routing API","title":"HerePy"},{"location":"installation/","text":"Installation & Testing \u00b6 Installation \u00b6 From PyPI $ pip install herepy From source Install dependencies using pip $ pip install -r requirements.txt Download the latest herepy library from: https://github.com/abdullahselek/HerePy Extract the source distribution and run $ python setup.py build $ python setup.py install Running Tests \u00b6 The test suite can be run against a single Python version which requires pip install pytest and optionally pip install pytest-cov (these are included if you have installed dependencies from requirements.testing.txt ) To run the unit tests with a single Python version $ py.test -v to also run code coverage $ py.test -v --cov-report html --cov = herepy To run the unit tests against a set of Python versions:: $ tox Getting the code \u00b6 The code is hosted at Github . Check out the latest development version anonymously with $ git clone https://github.com/abdullahselek/HerePy.git $ cd HerePy","title":"Installation & Testing"},{"location":"installation/#installation-testing","text":"","title":"Installation &amp; Testing"},{"location":"installation/#installation","text":"From PyPI $ pip install herepy From source Install dependencies using pip $ pip install -r requirements.txt Download the latest herepy library from: https://github.com/abdullahselek/HerePy Extract the source distribution and run $ python setup.py build $ python setup.py install","title":"Installation"},{"location":"installation/#running-tests","text":"The test suite can be run against a single Python version which requires pip install pytest and optionally pip install pytest-cov (these are included if you have installed dependencies from requirements.testing.txt ) To run the unit tests with a single Python version $ py.test -v to also run code coverage $ py.test -v --cov-report html --cov = herepy To run the unit tests against a set of Python versions:: $ tox","title":"Running Tests"},{"location":"installation/#getting-the-code","text":"The code is hosted at Github . Check out the latest development version anonymously with $ git clone https://github.com/abdullahselek/HerePy.git $ cd HerePy","title":"Getting the code"},{"location":"api/destination_weather_api/","text":"Destination Weather API \u00b6 \u00b6 DestinationWeatherApi \u00b6 A python interface into the HERE Destination Weather API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a DestinationWeatherApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/destination_weather_api.py 17 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a DestinationWeatherApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( DestinationWeatherApi , self ) . __init__ ( api_key , timeout ) self . _base_url = \"https://weather.ls.hereapi.com/weather/1.0/report.json\" weather_for_coordinates ( self , latitude , longitude , product , one_observation = True , metric = True ) \u00b6 Request the product for given location name. latitude (float): Latitude. longitude (float): Longitude. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. DestinationWeatherResponse HEREError Source code in herepy/destination_weather_api.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def weather_for_coordinates ( self , latitude : float , longitude : float , product : WeatherProductType , one_observation : bool = True , metric : bool = True ): \"\"\"Request the product for given location name. Args: latitude (float): Latitude. longitude (float): Longitude. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. Returns: DestinationWeatherResponse Raises: HEREError \"\"\" data = { \"apiKey\" : self . _api_key , \"product\" : product . __str__ (), \"oneobservation\" : one_observation , \"metric\" : metric , \"latitude\" : latitude , \"longitude\" : longitude , } return self . _get ( data , product ) weather_for_location_name ( self , location_name , product , one_observation = True , metric = True ) \u00b6 Request the product for given location name. location_name (str): Location name. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. DestinationWeatherResponse HEREError Source code in herepy/destination_weather_api.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def weather_for_location_name ( self , location_name : str , product : WeatherProductType , one_observation : bool = True , metric : bool = True ): \"\"\"Request the product for given location name. Args: location_name (str): Location name. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. Returns: DestinationWeatherResponse Raises: HEREError \"\"\" data = { \"apiKey\" : self . _api_key , \"product\" : product . __str__ (), \"oneobservation\" : one_observation , \"metric\" : metric , \"name\" : location_name , } return self . _get ( data , product ) weather_for_zip_code ( self , zip_code , product , one_observation = True , metric = True ) \u00b6 Request the product for given location name. zip_code (int): U.S. zip code. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. DestinationWeatherResponse HEREError Source code in herepy/destination_weather_api.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def weather_for_zip_code ( self , zip_code : int , product : WeatherProductType , one_observation : bool = True , metric : bool = True ): \"\"\"Request the product for given location name. Args: zip_code (int): U.S. zip code. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. Returns: DestinationWeatherResponse Raises: HEREError \"\"\" data = { \"apiKey\" : self . _api_key , \"product\" : product . __str__ (), \"oneobservation\" : one_observation , \"metric\" : metric , \"zipcode\" : zip_code , } return self . _get ( data , product ) InvalidRequestError \u00b6 Invalid Request Error Type. Indicates an invalid or missing parameter value in the request , for example value given for the product parameter does not exist . UnauthorizedError \u00b6 Unauthorized Error Type. Indicates authentication failure , invalid credentials were supplied .","title":"Destination Weather API"},{"location":"api/destination_weather_api/#destination-weather-api","text":"","title":"Destination Weather API"},{"location":"api/destination_weather_api/#herepy.destination_weather_api","text":"","title":"herepy.destination_weather_api"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.DestinationWeatherApi","text":"A python interface into the HERE Destination Weather API","title":"DestinationWeatherApi"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.DestinationWeatherApi.__init__","text":"Returns a DestinationWeatherApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/destination_weather_api.py 17 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a DestinationWeatherApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( DestinationWeatherApi , self ) . __init__ ( api_key , timeout ) self . _base_url = \"https://weather.ls.hereapi.com/weather/1.0/report.json\"","title":"__init__()"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.DestinationWeatherApi.weather_for_coordinates","text":"Request the product for given location name. latitude (float): Latitude. longitude (float): Longitude. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. DestinationWeatherResponse HEREError Source code in herepy/destination_weather_api.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def weather_for_coordinates ( self , latitude : float , longitude : float , product : WeatherProductType , one_observation : bool = True , metric : bool = True ): \"\"\"Request the product for given location name. Args: latitude (float): Latitude. longitude (float): Longitude. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. Returns: DestinationWeatherResponse Raises: HEREError \"\"\" data = { \"apiKey\" : self . _api_key , \"product\" : product . __str__ (), \"oneobservation\" : one_observation , \"metric\" : metric , \"latitude\" : latitude , \"longitude\" : longitude , } return self . _get ( data , product )","title":"weather_for_coordinates()"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.DestinationWeatherApi.weather_for_location_name","text":"Request the product for given location name. location_name (str): Location name. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. DestinationWeatherResponse HEREError Source code in herepy/destination_weather_api.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def weather_for_location_name ( self , location_name : str , product : WeatherProductType , one_observation : bool = True , metric : bool = True ): \"\"\"Request the product for given location name. Args: location_name (str): Location name. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. Returns: DestinationWeatherResponse Raises: HEREError \"\"\" data = { \"apiKey\" : self . _api_key , \"product\" : product . __str__ (), \"oneobservation\" : one_observation , \"metric\" : metric , \"name\" : location_name , } return self . _get ( data , product )","title":"weather_for_location_name()"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.DestinationWeatherApi.weather_for_zip_code","text":"Request the product for given location name. zip_code (int): U.S. zip code. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. DestinationWeatherResponse HEREError Source code in herepy/destination_weather_api.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def weather_for_zip_code ( self , zip_code : int , product : WeatherProductType , one_observation : bool = True , metric : bool = True ): \"\"\"Request the product for given location name. Args: zip_code (int): U.S. zip code. product (WeatherProductType): A WeatherProductType identifying the type of report to obtain. one_observation (bool): Limit the result to the best mapped weather station. metric (bool): Use the metric system. Returns: DestinationWeatherResponse Raises: HEREError \"\"\" data = { \"apiKey\" : self . _api_key , \"product\" : product . __str__ (), \"oneobservation\" : one_observation , \"metric\" : metric , \"zipcode\" : zip_code , } return self . _get ( data , product )","title":"weather_for_zip_code()"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.InvalidRequestError","text":"Invalid Request Error Type. Indicates an invalid or missing parameter value in the request , for example value given for the product parameter does not exist .","title":"InvalidRequestError"},{"location":"api/destination_weather_api/#herepy.destination_weather_api.UnauthorizedError","text":"Unauthorized Error Type. Indicates authentication failure , invalid credentials were supplied .","title":"UnauthorizedError"},{"location":"api/geocoder_api/","text":"Geocoder API \u00b6 \u00b6 GeocoderApi \u00b6 A python interface into the HERE Geocoder API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a GeocoderApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/geocoder_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a GeocoderApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( GeocoderApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json' address_with_boundingbox ( self , searchtext , top_left , bottom_right ) \u00b6 Geocodes given search text with in given boundingbox searchtext (str): possible address text. top_left (array): array including latitude and longitude in order. bottom_right (array): array including latitude and longitude in order. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def address_with_boundingbox ( self , searchtext : str , top_left : List [ float ], bottom_right : List [ float ]): \"\"\"Geocodes given search text with in given boundingbox Args: searchtext (str): possible address text. top_left (array): array including latitude and longitude in order. bottom_right (array): array including latitude and longitude in order. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'searchtext' : searchtext , 'mapview' : str . format ( '{0},{1};{2},{3}' , top_left [ 0 ], top_left [ 1 ], bottom_right [ 0 ], bottom_right [ 1 ]), 'apiKey' : self . _api_key } return self . __get ( data ) address_with_details ( self , house_number , street , city , country ) \u00b6 Geocodes with given address details house_number (int): house number. street (str): street name. city (str): city name. country (str): country name. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def address_with_details ( self , house_number : int , street : str , city : str , country : str ): \"\"\"Geocodes with given address details Args: house_number (int): house number. street (str): street name. city (str): city name. country (str): country name. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'housenumber' : house_number , 'street' : street , 'city' : city , 'country' : country , 'apiKey' : self . _api_key } return self . __get ( data ) free_form ( self , searchtext ) \u00b6 Geocodes given search text searchtext (str): possible address text. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 42 43 44 45 46 47 48 49 50 51 52 53 def free_form ( self , searchtext : str ): \"\"\"Geocodes given search text Args: searchtext (str): possible address text. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'searchtext' : searchtext , 'apiKey' : self . _api_key } return self . __get ( data ) street_intersection ( self , street , city ) \u00b6 Geocodes with given street and city street (str): street name. city (str): city name. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def street_intersection ( self , street : str , city : str ): \"\"\"Geocodes with given street and city Args: street (str): street name. city (str): city name. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'street' : street , 'city' : city , 'apiKey' : self . _api_key } return self . __get ( data )","title":"Geocoder API"},{"location":"api/geocoder_api/#geocoder-api","text":"","title":"Geocoder API"},{"location":"api/geocoder_api/#herepy.geocoder_api","text":"","title":"herepy.geocoder_api"},{"location":"api/geocoder_api/#herepy.geocoder_api.GeocoderApi","text":"A python interface into the HERE Geocoder API","title":"GeocoderApi"},{"location":"api/geocoder_api/#herepy.geocoder_api.GeocoderApi.__init__","text":"Returns a GeocoderApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/geocoder_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a GeocoderApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( GeocoderApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://geocoder.ls.hereapi.com/6.2/geocode.json'","title":"__init__()"},{"location":"api/geocoder_api/#herepy.geocoder_api.GeocoderApi.address_with_boundingbox","text":"Geocodes given search text with in given boundingbox searchtext (str): possible address text. top_left (array): array including latitude and longitude in order. bottom_right (array): array including latitude and longitude in order. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def address_with_boundingbox ( self , searchtext : str , top_left : List [ float ], bottom_right : List [ float ]): \"\"\"Geocodes given search text with in given boundingbox Args: searchtext (str): possible address text. top_left (array): array including latitude and longitude in order. bottom_right (array): array including latitude and longitude in order. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'searchtext' : searchtext , 'mapview' : str . format ( '{0},{1};{2},{3}' , top_left [ 0 ], top_left [ 1 ], bottom_right [ 0 ], bottom_right [ 1 ]), 'apiKey' : self . _api_key } return self . __get ( data )","title":"address_with_boundingbox()"},{"location":"api/geocoder_api/#herepy.geocoder_api.GeocoderApi.address_with_details","text":"Geocodes with given address details house_number (int): house number. street (str): street name. city (str): city name. country (str): country name. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def address_with_details ( self , house_number : int , street : str , city : str , country : str ): \"\"\"Geocodes with given address details Args: house_number (int): house number. street (str): street name. city (str): city name. country (str): country name. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'housenumber' : house_number , 'street' : street , 'city' : city , 'country' : country , 'apiKey' : self . _api_key } return self . __get ( data )","title":"address_with_details()"},{"location":"api/geocoder_api/#herepy.geocoder_api.GeocoderApi.free_form","text":"Geocodes given search text searchtext (str): possible address text. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 42 43 44 45 46 47 48 49 50 51 52 53 def free_form ( self , searchtext : str ): \"\"\"Geocodes given search text Args: searchtext (str): possible address text. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'searchtext' : searchtext , 'apiKey' : self . _api_key } return self . __get ( data )","title":"free_form()"},{"location":"api/geocoder_api/#herepy.geocoder_api.GeocoderApi.street_intersection","text":"Geocodes with given street and city street (str): street name. city (str): city name. GeocoderResponse HEREError Source code in herepy/geocoder_api.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def street_intersection ( self , street : str , city : str ): \"\"\"Geocodes with given street and city Args: street (str): street name. city (str): city name. Returns: GeocoderResponse Raises: HEREError\"\"\" data = { 'street' : street , 'city' : city , 'apiKey' : self . _api_key } return self . __get ( data )","title":"street_intersection()"},{"location":"api/geocoder_autocomplete_api/","text":"Geocoder Autocomplete API \u00b6 \u00b6 GeocoderAutoCompleteApi \u00b6 A python interface into the HERE Geocoder Auto Complete API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a GeocoderAutoCompleteApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/geocoder_autocomplete_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a GeocoderAutoCompleteApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( GeocoderAutoCompleteApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json' address_suggestion ( self , query , prox , radius ) \u00b6 Request a list of suggested addresses found within a specified area query (str): Query search string prox (array): Array including latitude and longitude in order. radius (int): Radius in meters GeocoderAutoCompleteApi HEREError Source code in herepy/geocoder_autocomplete_api.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def address_suggestion ( self , query : str , prox : List [ float ], radius : int ): \"\"\"Request a list of suggested addresses found within a specified area Args: query (str): Query search string prox (array): Array including latitude and longitude in order. radius (int): Radius in meters Returns: GeocoderAutoCompleteApi Raises: HEREError\"\"\" data = { 'query' : query , 'prox' : str . format ( '{0},{1},{2}' , prox [ 0 ], prox [ 1 ], radius ), 'apikey' : self . _api_key } return self . __get ( data ) highlighting_matches ( self , query , begin_highlight , end_highlight ) \u00b6 Request an annotated list of suggested addresses with matching tokens highlighted query (str): Query search string begin_highlight (str): Mark the beginning of match in a token end_highlight (str): Mark the end of match in a token GeocoderAutoCompleteApi HEREError Source code in herepy/geocoder_autocomplete_api.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def highlighting_matches ( self , query : str , begin_highlight : str , end_highlight : str ): \"\"\"Request an annotated list of suggested addresses with matching tokens highlighted Args: query (str): Query search string begin_highlight (str): Mark the beginning of match in a token end_highlight (str): Mark the end of match in a token Returns: GeocoderAutoCompleteApi Raises: HEREError\"\"\" data = { 'query' : query , 'beginHighlight' : begin_highlight , 'endHighlight' : end_highlight , 'apikey' : self . _api_key } return self . __get ( data ) limit_results_byaddress ( self , query , country_code ) \u00b6 Request a list of suggested addresses within a single country query (str): Query search string countryCode (str): Country code (USA etc.) GeocoderAutoCompleteApi HEREError Source code in herepy/geocoder_autocomplete_api.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def limit_results_byaddress ( self , query : str , country_code : str ): \"\"\"Request a list of suggested addresses within a single country Args: query (str): Query search string countryCode (str): Country code (USA etc.) Returns: GeocoderAutoCompleteApi Raises: HEREError\"\"\" data = { 'query' : query , 'country' : country_code , 'apikey' : self . _api_key } return self . __get ( data )","title":"Geocoder Autocomplete API"},{"location":"api/geocoder_autocomplete_api/#geocoder-autocomplete-api","text":"","title":"Geocoder Autocomplete API"},{"location":"api/geocoder_autocomplete_api/#herepy.geocoder_autocomplete_api","text":"","title":"herepy.geocoder_autocomplete_api"},{"location":"api/geocoder_autocomplete_api/#herepy.geocoder_autocomplete_api.GeocoderAutoCompleteApi","text":"A python interface into the HERE Geocoder Auto Complete API","title":"GeocoderAutoCompleteApi"},{"location":"api/geocoder_autocomplete_api/#herepy.geocoder_autocomplete_api.GeocoderAutoCompleteApi.__init__","text":"Returns a GeocoderAutoCompleteApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/geocoder_autocomplete_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a GeocoderAutoCompleteApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( GeocoderAutoCompleteApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json'","title":"__init__()"},{"location":"api/geocoder_autocomplete_api/#herepy.geocoder_autocomplete_api.GeocoderAutoCompleteApi.address_suggestion","text":"Request a list of suggested addresses found within a specified area query (str): Query search string prox (array): Array including latitude and longitude in order. radius (int): Radius in meters GeocoderAutoCompleteApi HEREError Source code in herepy/geocoder_autocomplete_api.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def address_suggestion ( self , query : str , prox : List [ float ], radius : int ): \"\"\"Request a list of suggested addresses found within a specified area Args: query (str): Query search string prox (array): Array including latitude and longitude in order. radius (int): Radius in meters Returns: GeocoderAutoCompleteApi Raises: HEREError\"\"\" data = { 'query' : query , 'prox' : str . format ( '{0},{1},{2}' , prox [ 0 ], prox [ 1 ], radius ), 'apikey' : self . _api_key } return self . __get ( data )","title":"address_suggestion()"},{"location":"api/geocoder_autocomplete_api/#herepy.geocoder_autocomplete_api.GeocoderAutoCompleteApi.highlighting_matches","text":"Request an annotated list of suggested addresses with matching tokens highlighted query (str): Query search string begin_highlight (str): Mark the beginning of match in a token end_highlight (str): Mark the end of match in a token GeocoderAutoCompleteApi HEREError Source code in herepy/geocoder_autocomplete_api.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def highlighting_matches ( self , query : str , begin_highlight : str , end_highlight : str ): \"\"\"Request an annotated list of suggested addresses with matching tokens highlighted Args: query (str): Query search string begin_highlight (str): Mark the beginning of match in a token end_highlight (str): Mark the end of match in a token Returns: GeocoderAutoCompleteApi Raises: HEREError\"\"\" data = { 'query' : query , 'beginHighlight' : begin_highlight , 'endHighlight' : end_highlight , 'apikey' : self . _api_key } return self . __get ( data )","title":"highlighting_matches()"},{"location":"api/geocoder_autocomplete_api/#herepy.geocoder_autocomplete_api.GeocoderAutoCompleteApi.limit_results_byaddress","text":"Request a list of suggested addresses within a single country query (str): Query search string countryCode (str): Country code (USA etc.) GeocoderAutoCompleteApi HEREError Source code in herepy/geocoder_autocomplete_api.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def limit_results_byaddress ( self , query : str , country_code : str ): \"\"\"Request a list of suggested addresses within a single country Args: query (str): Query search string countryCode (str): Country code (USA etc.) Returns: GeocoderAutoCompleteApi Raises: HEREError\"\"\" data = { 'query' : query , 'country' : country_code , 'apikey' : self . _api_key } return self . __get ( data )","title":"limit_results_byaddress()"},{"location":"api/geocoder_reverse_api/","text":"Reverse Geocoder API \u00b6 \u00b6 GeocoderReverseApi \u00b6 A python interface into the HERE Geocoder Reverse API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a GeocoderApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/geocoder_reverse_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a GeocoderApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( GeocoderReverseApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json' retrieve_addresses ( self , prox , radius = 250 , max_results = 1 , gen = 9 ) \u00b6 Gets the address information of a point within given radius prox (lat/lon): latitude longitude of the point radius (int): radius of the area in meters max_results (int): maximum resuls to retrieve. GeocoderReverseResponse HEREError Source code in herepy/geocoder_reverse_api.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def retrieve_addresses ( self , prox : List [ float ], radius : int = 250 , max_results : int = 1 , gen : int = 9 ): \"\"\"Gets the address information of a point within given radius Args: prox (lat/lon): latitude longitude of the point radius (int): radius of the area in meters max_results (int): maximum resuls to retrieve. Returns: GeocoderReverseResponse Raises: HEREError\"\"\" data = { 'prox' : str . format ( '{0},{1},{2}' , prox [ 0 ], prox [ 1 ], radius ), 'mode' : 'retrieveAddresses' , 'maxresults' : max_results , 'gen' : gen , 'apiKey' : self . _api_key } return self . __get ( data )","title":"Reverse Geocoder API"},{"location":"api/geocoder_reverse_api/#reverse-geocoder-api","text":"","title":"Reverse Geocoder API"},{"location":"api/geocoder_reverse_api/#herepy.geocoder_reverse_api","text":"","title":"herepy.geocoder_reverse_api"},{"location":"api/geocoder_reverse_api/#herepy.geocoder_reverse_api.GeocoderReverseApi","text":"A python interface into the HERE Geocoder Reverse API","title":"GeocoderReverseApi"},{"location":"api/geocoder_reverse_api/#herepy.geocoder_reverse_api.GeocoderReverseApi.__init__","text":"Returns a GeocoderApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/geocoder_reverse_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a GeocoderApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( GeocoderReverseApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json'","title":"__init__()"},{"location":"api/geocoder_reverse_api/#herepy.geocoder_reverse_api.GeocoderReverseApi.retrieve_addresses","text":"Gets the address information of a point within given radius prox (lat/lon): latitude longitude of the point radius (int): radius of the area in meters max_results (int): maximum resuls to retrieve. GeocoderReverseResponse HEREError Source code in herepy/geocoder_reverse_api.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def retrieve_addresses ( self , prox : List [ float ], radius : int = 250 , max_results : int = 1 , gen : int = 9 ): \"\"\"Gets the address information of a point within given radius Args: prox (lat/lon): latitude longitude of the point radius (int): radius of the area in meters max_results (int): maximum resuls to retrieve. Returns: GeocoderReverseResponse Raises: HEREError\"\"\" data = { 'prox' : str . format ( '{0},{1},{2}' , prox [ 0 ], prox [ 1 ], radius ), 'mode' : 'retrieveAddresses' , 'maxresults' : max_results , 'gen' : gen , 'apiKey' : self . _api_key } return self . __get ( data )","title":"retrieve_addresses()"},{"location":"api/here_api/","text":"Base HERE API \u00b6 \u00b6 HEREApi \u00b6 Base class from which all wrappers inherit. __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a Api instance. app_id (str): App Id taken from HERE Developer Portal. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/here_api.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a Api instance. Args: app_id (str): App Id taken from HERE Developer Portal. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" self . __set_credentials ( api_key ) if timeout : self . _timeout = timeout else : self . _timeout = 20","title":"Base HERE API"},{"location":"api/here_api/#base-here-api","text":"","title":"Base HERE API"},{"location":"api/here_api/#herepy.here_api","text":"","title":"herepy.here_api"},{"location":"api/here_api/#herepy.here_api.HEREApi","text":"Base class from which all wrappers inherit.","title":"HEREApi"},{"location":"api/here_api/#herepy.here_api.HEREApi.__init__","text":"Returns a Api instance. app_id (str): App Id taken from HERE Developer Portal. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/here_api.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a Api instance. Args: app_id (str): App Id taken from HERE Developer Portal. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" self . __set_credentials ( api_key ) if timeout : self . _timeout = timeout else : self . _timeout = 20","title":"__init__()"},{"location":"api/places_api/","text":"Places API \u00b6 \u00b6 PlacesApi \u00b6 A python interface into the HERE Places (Search) API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a PlacesApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/places_api.py 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a PlacesApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( PlacesApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://places.ls.hereapi.com/places/v1/' category_places_at ( self , coordinates , categories = None ) \u00b6 Request a list of places within a category around a location coordinates (array): array including latitude and longitude in order. categories (array): array including PlacesCategory enums. PlacesResponse HEREError Source code in herepy/places_api.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def category_places_at ( self , coordinates : List [ float ], categories : List [ PlacesCategory ] = None ): \"\"\"Request a list of places within a category around a location Args: coordinates (array): array including latitude and longitude in order. categories (array): array including PlacesCategory enums. Returns: PlacesResponse Raises: HEREError\"\"\" if categories is None : raise Exception ( sys . _getframe ( 0 ) . f_code . co_name + ' function requires category types!' ) data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'cat' : self . __prepare_category_values ( categories ), 'apikey' : self . _api_key } return self . __get ( data , 'discover/explore' ) nearby_places ( self , coordinates ) \u00b6 Request a list of places close to a location coordinates (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 124 125 126 127 128 129 130 131 132 133 134 135 136 def nearby_places ( self , coordinates : List [ float ]): \"\"\"Request a list of places close to a location Args: coordinates (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'discover/here' ) onebox_search ( self , coordinates , query ) \u00b6 Request a list of nearby places based on a query string coordinates (array): array including latitude and longitude in order. query (str): search term. PlacesResponse HEREError Source code in herepy/places_api.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def onebox_search ( self , coordinates : List [ float ], query : str ): \"\"\"Request a list of nearby places based on a query string Args: coordinates (array): array including latitude and longitude in order. query (str): search term. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'q' : query , 'apikey' : self . _api_key } return self . __get ( data , 'discover/search' ) place_categories ( self , coordinates ) \u00b6 Request a list of place categories available for a given location coordinates (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 155 156 157 158 159 160 161 162 163 164 165 166 167 def place_categories ( self , coordinates : List [ float ]): \"\"\"Request a list of place categories available for a given location Args: coordinates (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } return self . __get_categories ( data ) places_at ( self , coordinates ) \u00b6 Request a list of popular places around a location coordinates (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 82 83 84 85 86 87 88 89 90 91 92 93 94 def places_at ( self , coordinates : List [ float ]): \"\"\"Request a list of popular places around a location Args: coordinates (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'discover/explore' ) places_at_boundingbox ( self , coordinates_a , coordinates_b ) \u00b6 Request a list of popular places within a specified area coordinates_a (array): array including latitude and longitude in order. coordinates_b (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 def places_at_boundingbox ( self , coordinates_a : List [ float ], coordinates_b : List [ float ]): \"\"\"Request a list of popular places within a specified area Args: coordinates_a (array): array including latitude and longitude in order. coordinates_b (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'in' : str . format ( '{0},{1},{2},{3}' , coordinates_a [ 0 ], coordinates_a [ 1 ], coordinates_b [ 0 ], coordinates_b [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'discover/explore' ) places_with_language ( self , coordinates , language ) \u00b6 Request a list of popular places around a location using a foreign language coordinates (array): array including latitude and longitude in order. language (str): string value for language like en-US PlacesResponse HEREError Source code in herepy/places_api.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def places_with_language ( self , coordinates : List [ float ], language : str ): \"\"\"Request a list of popular places around a location using a foreign language Args: coordinates (array): array including latitude and longitude in order. language (str): string value for language like `en-US` Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } headers = { 'accept-language' : language } return self . __get ( data , 'discover/explore' ) search_suggestions ( self , coordinates , query ) \u00b6 Request a list of suggestions based on a partial query string coordinates (array): array including latitude and longitude in order. query (str): search term. PlacesResponse HEREError Source code in herepy/places_api.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 def search_suggestions ( self , coordinates : List [ float ], query : str ): \"\"\"Request a list of suggestions based on a partial query string Args: coordinates (array): array including latitude and longitude in order. query (str): search term. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'q' : query , 'apikey' : self . _api_key } return self . __get_suggestions ( data )","title":"Places API"},{"location":"api/places_api/#places-api","text":"","title":"Places API"},{"location":"api/places_api/#herepy.places_api","text":"","title":"herepy.places_api"},{"location":"api/places_api/#herepy.places_api.PlacesApi","text":"A python interface into the HERE Places (Search) API","title":"PlacesApi"},{"location":"api/places_api/#herepy.places_api.PlacesApi.__init__","text":"Returns a PlacesApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/places_api.py 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a PlacesApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( PlacesApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://places.ls.hereapi.com/places/v1/'","title":"__init__()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.category_places_at","text":"Request a list of places within a category around a location coordinates (array): array including latitude and longitude in order. categories (array): array including PlacesCategory enums. PlacesResponse HEREError Source code in herepy/places_api.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def category_places_at ( self , coordinates : List [ float ], categories : List [ PlacesCategory ] = None ): \"\"\"Request a list of places within a category around a location Args: coordinates (array): array including latitude and longitude in order. categories (array): array including PlacesCategory enums. Returns: PlacesResponse Raises: HEREError\"\"\" if categories is None : raise Exception ( sys . _getframe ( 0 ) . f_code . co_name + ' function requires category types!' ) data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'cat' : self . __prepare_category_values ( categories ), 'apikey' : self . _api_key } return self . __get ( data , 'discover/explore' )","title":"category_places_at()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.nearby_places","text":"Request a list of places close to a location coordinates (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 124 125 126 127 128 129 130 131 132 133 134 135 136 def nearby_places ( self , coordinates : List [ float ]): \"\"\"Request a list of places close to a location Args: coordinates (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'discover/here' )","title":"nearby_places()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.onebox_search","text":"Request a list of nearby places based on a query string coordinates (array): array including latitude and longitude in order. query (str): search term. PlacesResponse HEREError Source code in herepy/places_api.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def onebox_search ( self , coordinates : List [ float ], query : str ): \"\"\"Request a list of nearby places based on a query string Args: coordinates (array): array including latitude and longitude in order. query (str): search term. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'q' : query , 'apikey' : self . _api_key } return self . __get ( data , 'discover/search' )","title":"onebox_search()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.place_categories","text":"Request a list of place categories available for a given location coordinates (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 155 156 157 158 159 160 161 162 163 164 165 166 167 def place_categories ( self , coordinates : List [ float ]): \"\"\"Request a list of place categories available for a given location Args: coordinates (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } return self . __get_categories ( data )","title":"place_categories()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.places_at","text":"Request a list of popular places around a location coordinates (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 82 83 84 85 86 87 88 89 90 91 92 93 94 def places_at ( self , coordinates : List [ float ]): \"\"\"Request a list of popular places around a location Args: coordinates (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'discover/explore' )","title":"places_at()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.places_at_boundingbox","text":"Request a list of popular places within a specified area coordinates_a (array): array including latitude and longitude in order. coordinates_b (array): array including latitude and longitude in order. PlacesResponse HEREError Source code in herepy/places_api.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 def places_at_boundingbox ( self , coordinates_a : List [ float ], coordinates_b : List [ float ]): \"\"\"Request a list of popular places within a specified area Args: coordinates_a (array): array including latitude and longitude in order. coordinates_b (array): array including latitude and longitude in order. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'in' : str . format ( '{0},{1},{2},{3}' , coordinates_a [ 0 ], coordinates_a [ 1 ], coordinates_b [ 0 ], coordinates_b [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'discover/explore' )","title":"places_at_boundingbox()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.places_with_language","text":"Request a list of popular places around a location using a foreign language coordinates (array): array including latitude and longitude in order. language (str): string value for language like en-US PlacesResponse HEREError Source code in herepy/places_api.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def places_with_language ( self , coordinates : List [ float ], language : str ): \"\"\"Request a list of popular places around a location using a foreign language Args: coordinates (array): array including latitude and longitude in order. language (str): string value for language like `en-US` Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'apikey' : self . _api_key } headers = { 'accept-language' : language } return self . __get ( data , 'discover/explore' )","title":"places_with_language()"},{"location":"api/places_api/#herepy.places_api.PlacesApi.search_suggestions","text":"Request a list of suggestions based on a partial query string coordinates (array): array including latitude and longitude in order. query (str): search term. PlacesResponse HEREError Source code in herepy/places_api.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 def search_suggestions ( self , coordinates : List [ float ], query : str ): \"\"\"Request a list of suggestions based on a partial query string Args: coordinates (array): array including latitude and longitude in order. query (str): search term. Returns: PlacesResponse Raises: HEREError\"\"\" data = { 'at' : str . format ( '{0},{1}' , coordinates [ 0 ], coordinates [ 1 ]), 'q' : query , 'apikey' : self . _api_key } return self . __get_suggestions ( data )","title":"search_suggestions()"},{"location":"api/public_transit_api/","text":"Public Transit API \u00b6 \u00b6 PublicTransitApi \u00b6 A python interface into the HERE Public Transit API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a PublicTransitApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/public_transit_api.py 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a PublicTransitApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( PublicTransitApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://transit.ls.hereapi.com/v3/' calculate_route ( self , departure , arrival , time , max_connections = 3 , changes =- 1 , lang = 'en' , include_modes = None , exclude_modes = None , units = 'metric' , max_walking_distance = 2000 , walking_speed = 100 , show_arrival_times = True , graph = False , routing_mode =< PublicTransitRoutingMode . schedule : 'schedule' > ) \u00b6 Request a public transit route between any two places. departure (array): array including latitude and longitude in order. arrival (array): array including latitude and longitude in order. time (str): time formatted in yyyy-mm-ddThh:mm:ss. max_connections (int): Specifies the number of following departure/arrivals the response should include. The possible values are: 1-6. changes (int): Specifies the maximum number of changes or transfers allowed in a route. 0-6 or -1. The default is -1 (which disables the filter, or unlimited no of changes permitted). lang (str): Specifies the language of the response. include_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to include in the response. exclude_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to exclude in the response. units (str): Units of measurement used. metric oder imperial. max_walking_distance (int): Specifies a maximum walking distance in meters. Allowed values are 0-6000. walking_speed (int): Specifies the walking speed in percent of normal walking speed. Allowed values are 50-200. show_arrival_times (boolean): flag to indicate if response should show arrival times or departure times. graph (boolean): flag to indicate if response should contain coordinate pairs to allow the drawing of a polyline for the route. routing_type (PublicTransitRoutingType): type of routing. Default is time_tabled. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def calculate_route ( self , departure : List [ float ], arrival : List [ float ], time : str , max_connections : int = 3 , changes : int =- 1 , lang : str = \"en\" , include_modes : List [ PublicTransitModeType ] = None , exclude_modes : List [ PublicTransitModeType ] = None , units : str = \"metric\" , max_walking_distance : int = 2000 , walking_speed : int = 100 , show_arrival_times : bool = True , graph : bool = False , routing_mode : PublicTransitRoutingMode = PublicTransitRoutingMode . schedule ): \"\"\"Request a public transit route between any two places. Args: departure (array): array including latitude and longitude in order. arrival (array): array including latitude and longitude in order. time (str): time formatted in yyyy-mm-ddThh:mm:ss. max_connections (int): Specifies the number of following departure/arrivals the response should include. The possible values are: 1-6. changes (int): Specifies the maximum number of changes or transfers allowed in a route. 0-6 or -1. The default is -1 (which disables the filter, or unlimited no of changes permitted). lang (str): Specifies the language of the response. include_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to include in the response. exclude_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to exclude in the response. units (str): Units of measurement used. metric oder imperial. max_walking_distance (int): Specifies a maximum walking distance in meters. Allowed values are 0-6000. walking_speed (int): Specifies the walking speed in percent of normal walking speed. Allowed values are 50-200. show_arrival_times (boolean): flag to indicate if response should show arrival times or departure times. graph (boolean): flag to indicate if response should contain coordinate pairs to allow the drawing of a polyline for the route. routing_type (PublicTransitRoutingType): type of routing. Default is time_tabled. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'dep' : str . format ( '{0},{1}' , departure [ 0 ], departure [ 1 ]), 'arr' : str . format ( '{0},{1}' , arrival [ 0 ], arrival [ 1 ]), 'max' : max_connections , 'time' : time , 'changes' : changes , 'lang' : lang , 'units' : units , 'walk' : \",\" . join ([ str ( max_walking_distance ), str ( walking_speed )]), 'arrival' : 1 if show_arrival_times == True else 0 , 'apikey' : self . _api_key , 'graph' : 1 if graph == True else 0 , 'routingMode' : routing_mode . __str__ ()} modes = None if include_modes is not None and exclude_modes is not None : raise HEREError ( \"Specify either include_modes or exclude_modes, not both.\" ) if include_modes is not None : modes = \",\" . join ( mode . __str__ () for mode in include_modes ) if exclude_modes is not None : modes = \",\" . join ( \"-\" + mode . __str__ () for mode in exclude_modes ) if modes is not None : data [ \"modes\" ] = modes response = self . __get ( data , 'route.json' , 'Connections' ) response_with_short_route = self . _get_response_with_short_route ( response ) return response_with_short_route coverage_nearby ( self , details , center ) \u00b6 Request a list of transit operators and station coverage nearby. details (int): 0 disables showing line info, 1 enables showing line info.abs center (array): array including latitude and longitude in order. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 def coverage_nearby ( self , details : int , center : List [ float ]): \"\"\"Request a list of transit operators and station coverage nearby. Args: details (int): 0 disables showing line info, 1 enables showing line info.abs center (array): array including latitude and longitude in order. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'details' : details , 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'coverage/nearby.json' , 'LocalCoverage' ) coverage_witin_a_city ( self , city_name , political_view , max = None , details = 1 , lang = 'en' ) \u00b6 Request a list of transit operator coverage within a specified city. city_name (str): the name or part of the name of the search city. political_view (int): 1 enables, 0 disables grouping results. max (int): maximum number of results. details (int): with 1 supported list of operators and population added to response. Set to 0 just return the matching city names. lang (str): the language of the response, default en . PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 def coverage_witin_a_city ( self , city_name : str , political_view : int , max : int = None , details : int = 1 , lang : str = 'en' ): \"\"\"Request a list of transit operator coverage within a specified city. Args: city_name (str): the name or part of the name of the search city. political_view (int): 1 enables, 0 disables grouping results. max (int): maximum number of results. details (int): with 1 supported list of operators and population added to response. Set to 0 just return the matching city names. lang (str): the language of the response, default `en`. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'name' : city_name , 'apikey' : self . _api_key , 'max' : max , 'details' : details , 'politicalview' : political_view , 'lang' : lang } if max is None : del data [ 'max' ] return self . __get ( data , 'coverage/search.json' , 'Coverage' ) find_stations_by_id ( self , ids , lang ) \u00b6 Request details of a specific transit station based on a previous request. ids (array): array contains station ids. lang (str): language code for response like en . PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def find_stations_by_id ( self , ids : List [ int ], lang : str ): \"\"\"Request details of a specific transit station based on a previous request. Args: ids (array): array contains station ids. lang (str): language code for response like `en`. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'stnIds' : self . __prepare_station_ids ( ids ), 'lang' : lang , 'apikey' : self . _api_key } return self . __get ( data , 'stations/by_ids.json' , 'Stations' ) find_stations_by_name ( self , center , name , max_count = 5 , method =< PublicTransitSearchMethod . fuzzy : 'fuzzy' > , radius = 20000 ) \u00b6 Request a list of public transit stations based on name. center (array): array including latitude and longitude in order. name (str): station name. max_count (int): maximum number of stations (Default is 5). method (enum): Matching method from PublicTransitSearchMethod (Default is fuzzy). radius (int): specifies radius in kilometers (Default is 20000km). PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def find_stations_by_name ( self , center : List [ float ], name : str , max_count : int = 5 , method : PublicTransitSearchMethod = PublicTransitSearchMethod . fuzzy , radius : int = 20000 ): \"\"\"Request a list of public transit stations based on name. Args: center (array): array including latitude and longitude in order. name (str): station name. max_count (int): maximum number of stations (Default is 5). method (enum): Matching method from PublicTransitSearchMethod (Default is fuzzy). radius (int): specifies radius in kilometers (Default is 20000km). Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'name' : name , 'apikey' : self . _api_key , 'max' : max_count , 'method' : method . __str__ (), 'radius' : radius } return self . __get ( data , 'stations/by_name.json' , 'Stations' ) find_stations_nearby ( self , center , radius = 500 , max_count = 5 ) \u00b6 Request a list of public transit stations within a given geo-location. center (array): array including latitude and longitude in order. radius (int): specifies radius in meters (Default is 500m). max_count (int): maximum number of stations (Default is 5). PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def find_stations_nearby ( self , center : List [ float ], radius : int = 500 , max_count : int = 5 ): \"\"\"Request a list of public transit stations within a given geo-location. Args: center (array): array including latitude and longitude in order. radius (int): specifies radius in meters (Default is 500m). max_count (int): maximum number of stations (Default is 5). Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'radius' : radius , 'apikey' : self . _api_key , 'max' : max_count } return self . __get ( data , 'stations/by_geocoord.json' , 'Stations' ) find_transit_coverage_in_cities ( self , center , political_view , radius ) \u00b6 Request a list of transit operators available in cities nearby. center (array): array including latitude and longitude in order. political_view (str): switch for grouping results like CHN . radius (int): specifies radius in meters. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def find_transit_coverage_in_cities ( self , center : List [ float ], political_view : str , radius : int ): \"\"\"Request a list of transit operators available in cities nearby. Args: center (array): array including latitude and longitude in order. political_view (str): switch for grouping results like `CHN`. radius (int): specifies radius in meters. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'politicalview' : political_view , 'radius' : radius , 'apikey' : self . _api_key ,} return self . __get ( data , 'coverage/city.json' , 'Coverage' ) next_departures_for_stations ( self , station_ids , time , lang = 'en' , max = 40 , max_station = 40 ) \u00b6 Request a list of all next departure times and destinations for a give list of stations. station_ids (array): a list of stop ids. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like en . Default is en . max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 def next_departures_for_stations ( self , station_ids : List [ int ], time : str , lang : str = 'en' , max : int = 40 , max_station : int = 40 ): \"\"\"Request a list of all next departure times and destinations for a give list of stations. Args: station_ids (array): a list of stop ids. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like `en`. Default is `en`. max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'lang' : lang , 'time' : time , 'apikey' : self . _api_key , 'max' : max , 'maxStn' : max_station , 'stnIds' : self . __prepare_station_ids ( station_ids )} return self . __get ( data , 'multiboard/by_stn_ids.json' , 'MultiNextDepartures' ) next_departures_from_location ( self , center , time , lang = 'en' , max = 40 , max_station = 40 ) \u00b6 Request a list of all next departure times and destinations from a given location. center (array): array including latitude and longitude in order. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like en . Default is en . max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def next_departures_from_location ( self , center : List [ float ], time : str , lang : str = 'en' , max : int = 40 , max_station : int = 40 ): \"\"\"Request a list of all next departure times and destinations from a given location. Args: center (array): array including latitude and longitude in order. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like `en`. Default is `en`. max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'lang' : lang , 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'time' : time , 'apikey' : self . _api_key , 'max' : max , 'maxStn' : max_station } return self . __get ( data , 'multiboard/by_geocoord.json' , 'MultiNextDepartures' ) next_nearby_departures_of_station ( self , station_id , time , lang = 'en' ) \u00b6 Request a list of next departure times and destinations of a particular station. lang (str): language code for response like en Default is en . station_id (int): station id for departures. time (str): time formattes in yyyy-mm-ddThh:mm:ss. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def next_nearby_departures_of_station ( self , station_id : int , time : str , lang : str = 'en' ): \"\"\"Request a list of next departure times and destinations of a particular station. Args: lang (str): language code for response like `en` Default is `en`. station_id (int): station id for departures. time (str): time formattes in yyyy-mm-ddThh:mm:ss. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'lang' : lang , 'stnId' : station_id , 'time' : time , 'apikey' : self . _api_key } return self . __get ( data , 'board.json' , 'NextDepartures' )","title":"Public Transit API"},{"location":"api/public_transit_api/#public-transit-api","text":"","title":"Public Transit API"},{"location":"api/public_transit_api/#herepy.public_transit_api","text":"","title":"herepy.public_transit_api"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi","text":"A python interface into the HERE Public Transit API","title":"PublicTransitApi"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.__init__","text":"Returns a PublicTransitApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/public_transit_api.py 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a PublicTransitApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( PublicTransitApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://transit.ls.hereapi.com/v3/'","title":"__init__()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.calculate_route","text":"Request a public transit route between any two places. departure (array): array including latitude and longitude in order. arrival (array): array including latitude and longitude in order. time (str): time formatted in yyyy-mm-ddThh:mm:ss. max_connections (int): Specifies the number of following departure/arrivals the response should include. The possible values are: 1-6. changes (int): Specifies the maximum number of changes or transfers allowed in a route. 0-6 or -1. The default is -1 (which disables the filter, or unlimited no of changes permitted). lang (str): Specifies the language of the response. include_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to include in the response. exclude_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to exclude in the response. units (str): Units of measurement used. metric oder imperial. max_walking_distance (int): Specifies a maximum walking distance in meters. Allowed values are 0-6000. walking_speed (int): Specifies the walking speed in percent of normal walking speed. Allowed values are 50-200. show_arrival_times (boolean): flag to indicate if response should show arrival times or departure times. graph (boolean): flag to indicate if response should contain coordinate pairs to allow the drawing of a polyline for the route. routing_type (PublicTransitRoutingType): type of routing. Default is time_tabled. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def calculate_route ( self , departure : List [ float ], arrival : List [ float ], time : str , max_connections : int = 3 , changes : int =- 1 , lang : str = \"en\" , include_modes : List [ PublicTransitModeType ] = None , exclude_modes : List [ PublicTransitModeType ] = None , units : str = \"metric\" , max_walking_distance : int = 2000 , walking_speed : int = 100 , show_arrival_times : bool = True , graph : bool = False , routing_mode : PublicTransitRoutingMode = PublicTransitRoutingMode . schedule ): \"\"\"Request a public transit route between any two places. Args: departure (array): array including latitude and longitude in order. arrival (array): array including latitude and longitude in order. time (str): time formatted in yyyy-mm-ddThh:mm:ss. max_connections (int): Specifies the number of following departure/arrivals the response should include. The possible values are: 1-6. changes (int): Specifies the maximum number of changes or transfers allowed in a route. 0-6 or -1. The default is -1 (which disables the filter, or unlimited no of changes permitted). lang (str): Specifies the language of the response. include_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to include in the response. exclude_modes (array[PublicTransitModeType]): Specifies the transit type filter used to determine which types of transit to exclude in the response. units (str): Units of measurement used. metric oder imperial. max_walking_distance (int): Specifies a maximum walking distance in meters. Allowed values are 0-6000. walking_speed (int): Specifies the walking speed in percent of normal walking speed. Allowed values are 50-200. show_arrival_times (boolean): flag to indicate if response should show arrival times or departure times. graph (boolean): flag to indicate if response should contain coordinate pairs to allow the drawing of a polyline for the route. routing_type (PublicTransitRoutingType): type of routing. Default is time_tabled. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'dep' : str . format ( '{0},{1}' , departure [ 0 ], departure [ 1 ]), 'arr' : str . format ( '{0},{1}' , arrival [ 0 ], arrival [ 1 ]), 'max' : max_connections , 'time' : time , 'changes' : changes , 'lang' : lang , 'units' : units , 'walk' : \",\" . join ([ str ( max_walking_distance ), str ( walking_speed )]), 'arrival' : 1 if show_arrival_times == True else 0 , 'apikey' : self . _api_key , 'graph' : 1 if graph == True else 0 , 'routingMode' : routing_mode . __str__ ()} modes = None if include_modes is not None and exclude_modes is not None : raise HEREError ( \"Specify either include_modes or exclude_modes, not both.\" ) if include_modes is not None : modes = \",\" . join ( mode . __str__ () for mode in include_modes ) if exclude_modes is not None : modes = \",\" . join ( \"-\" + mode . __str__ () for mode in exclude_modes ) if modes is not None : data [ \"modes\" ] = modes response = self . __get ( data , 'route.json' , 'Connections' ) response_with_short_route = self . _get_response_with_short_route ( response ) return response_with_short_route","title":"calculate_route()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.coverage_nearby","text":"Request a list of transit operators and station coverage nearby. details (int): 0 disables showing line info, 1 enables showing line info.abs center (array): array including latitude and longitude in order. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 def coverage_nearby ( self , details : int , center : List [ float ]): \"\"\"Request a list of transit operators and station coverage nearby. Args: details (int): 0 disables showing line info, 1 enables showing line info.abs center (array): array including latitude and longitude in order. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'details' : details , 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'apikey' : self . _api_key } return self . __get ( data , 'coverage/nearby.json' , 'LocalCoverage' )","title":"coverage_nearby()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.coverage_witin_a_city","text":"Request a list of transit operator coverage within a specified city. city_name (str): the name or part of the name of the search city. political_view (int): 1 enables, 0 disables grouping results. max (int): maximum number of results. details (int): with 1 supported list of operators and population added to response. Set to 0 just return the matching city names. lang (str): the language of the response, default en . PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 def coverage_witin_a_city ( self , city_name : str , political_view : int , max : int = None , details : int = 1 , lang : str = 'en' ): \"\"\"Request a list of transit operator coverage within a specified city. Args: city_name (str): the name or part of the name of the search city. political_view (int): 1 enables, 0 disables grouping results. max (int): maximum number of results. details (int): with 1 supported list of operators and population added to response. Set to 0 just return the matching city names. lang (str): the language of the response, default `en`. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'name' : city_name , 'apikey' : self . _api_key , 'max' : max , 'details' : details , 'politicalview' : political_view , 'lang' : lang } if max is None : del data [ 'max' ] return self . __get ( data , 'coverage/search.json' , 'Coverage' )","title":"coverage_witin_a_city()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.find_stations_by_id","text":"Request details of a specific transit station based on a previous request. ids (array): array contains station ids. lang (str): language code for response like en . PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def find_stations_by_id ( self , ids : List [ int ], lang : str ): \"\"\"Request details of a specific transit station based on a previous request. Args: ids (array): array contains station ids. lang (str): language code for response like `en`. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'stnIds' : self . __prepare_station_ids ( ids ), 'lang' : lang , 'apikey' : self . _api_key } return self . __get ( data , 'stations/by_ids.json' , 'Stations' )","title":"find_stations_by_id()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.find_stations_by_name","text":"Request a list of public transit stations based on name. center (array): array including latitude and longitude in order. name (str): station name. max_count (int): maximum number of stations (Default is 5). method (enum): Matching method from PublicTransitSearchMethod (Default is fuzzy). radius (int): specifies radius in kilometers (Default is 20000km). PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def find_stations_by_name ( self , center : List [ float ], name : str , max_count : int = 5 , method : PublicTransitSearchMethod = PublicTransitSearchMethod . fuzzy , radius : int = 20000 ): \"\"\"Request a list of public transit stations based on name. Args: center (array): array including latitude and longitude in order. name (str): station name. max_count (int): maximum number of stations (Default is 5). method (enum): Matching method from PublicTransitSearchMethod (Default is fuzzy). radius (int): specifies radius in kilometers (Default is 20000km). Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'name' : name , 'apikey' : self . _api_key , 'max' : max_count , 'method' : method . __str__ (), 'radius' : radius } return self . __get ( data , 'stations/by_name.json' , 'Stations' )","title":"find_stations_by_name()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.find_stations_nearby","text":"Request a list of public transit stations within a given geo-location. center (array): array including latitude and longitude in order. radius (int): specifies radius in meters (Default is 500m). max_count (int): maximum number of stations (Default is 5). PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def find_stations_nearby ( self , center : List [ float ], radius : int = 500 , max_count : int = 5 ): \"\"\"Request a list of public transit stations within a given geo-location. Args: center (array): array including latitude and longitude in order. radius (int): specifies radius in meters (Default is 500m). max_count (int): maximum number of stations (Default is 5). Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'radius' : radius , 'apikey' : self . _api_key , 'max' : max_count } return self . __get ( data , 'stations/by_geocoord.json' , 'Stations' )","title":"find_stations_nearby()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.find_transit_coverage_in_cities","text":"Request a list of transit operators available in cities nearby. center (array): array including latitude and longitude in order. political_view (str): switch for grouping results like CHN . radius (int): specifies radius in meters. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def find_transit_coverage_in_cities ( self , center : List [ float ], political_view : str , radius : int ): \"\"\"Request a list of transit operators available in cities nearby. Args: center (array): array including latitude and longitude in order. political_view (str): switch for grouping results like `CHN`. radius (int): specifies radius in meters. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'politicalview' : political_view , 'radius' : radius , 'apikey' : self . _api_key ,} return self . __get ( data , 'coverage/city.json' , 'Coverage' )","title":"find_transit_coverage_in_cities()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.next_departures_for_stations","text":"Request a list of all next departure times and destinations for a give list of stations. station_ids (array): a list of stop ids. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like en . Default is en . max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 def next_departures_for_stations ( self , station_ids : List [ int ], time : str , lang : str = 'en' , max : int = 40 , max_station : int = 40 ): \"\"\"Request a list of all next departure times and destinations for a give list of stations. Args: station_ids (array): a list of stop ids. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like `en`. Default is `en`. max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'lang' : lang , 'time' : time , 'apikey' : self . _api_key , 'max' : max , 'maxStn' : max_station , 'stnIds' : self . __prepare_station_ids ( station_ids )} return self . __get ( data , 'multiboard/by_stn_ids.json' , 'MultiNextDepartures' )","title":"next_departures_for_stations()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.next_departures_from_location","text":"Request a list of all next departure times and destinations from a given location. center (array): array including latitude and longitude in order. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like en . Default is en . max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def next_departures_from_location ( self , center : List [ float ], time : str , lang : str = 'en' , max : int = 40 , max_station : int = 40 ): \"\"\"Request a list of all next departure times and destinations from a given location. Args: center (array): array including latitude and longitude in order. time (str): time formattes in yyyy-mm-ddThh:mm:ss. lang (str): language code for response like `en`. Default is `en`. max (int): maximum number of next departures per station. Default is 40. max_station (int): maximum number of stations for which departures are required. Default is 40. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'lang' : lang , 'center' : str . format ( '{0},{1}' , center [ 0 ], center [ 1 ]), 'time' : time , 'apikey' : self . _api_key , 'max' : max , 'maxStn' : max_station } return self . __get ( data , 'multiboard/by_geocoord.json' , 'MultiNextDepartures' )","title":"next_departures_from_location()"},{"location":"api/public_transit_api/#herepy.public_transit_api.PublicTransitApi.next_nearby_departures_of_station","text":"Request a list of next departure times and destinations of a particular station. lang (str): language code for response like en Default is en . station_id (int): station id for departures. time (str): time formattes in yyyy-mm-ddThh:mm:ss. PublicTransitResponse HEREError Source code in herepy/public_transit_api.py 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def next_nearby_departures_of_station ( self , station_id : int , time : str , lang : str = 'en' ): \"\"\"Request a list of next departure times and destinations of a particular station. Args: lang (str): language code for response like `en` Default is `en`. station_id (int): station id for departures. time (str): time formattes in yyyy-mm-ddThh:mm:ss. Returns: PublicTransitResponse Raises: HEREError \"\"\" data = { 'lang' : lang , 'stnId' : station_id , 'time' : time , 'apikey' : self . _api_key } return self . __get ( data , 'board.json' , 'NextDepartures' )","title":"next_nearby_departures_of_station()"},{"location":"api/rme_api/","text":"Route Matching API \u00b6 \u00b6 RmeApi \u00b6 A python interface into the RME API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a RmeApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/rme_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a RmeApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( RmeApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://m.fleet.ls.hereapi.com/2/matchroute.json' match_route ( self , gpx_file_content , route_mode = 'car' , pde_layers = []) \u00b6 Retrieves misc information about the route given in gpx file gpxfile content (str): gpx file content as string routemode (str): route mode ('car') pde_layers (str list): PDE layers to retrieve e.g.: ROAD_GEOM_FCn(TUNNEL) SPEED_LIMITS_FCn(FROM_REF_SPEED_LIMIT,TO_REF_SPEED_LIMIT) ADAS_ATTRIB_FCn(SLOPES) or e . g ., ROAD_GEOM_FCn ( * ) SPEED_LIMITS_FCn ( * ) RmeResponse HEREError Source code in herepy/rme_api.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def match_route ( self , gpx_file_content : str , route_mode : str = 'car' , pde_layers : List [ str ] = []): \"\"\"Retrieves misc information about the route given in gpx file Args: gpxfile content (str): gpx file content as string routemode (str): route mode ('car') pde_layers (str list): PDE layers to retrieve e.g.: ROAD_GEOM_FCn(TUNNEL) SPEED_LIMITS_FCn(FROM_REF_SPEED_LIMIT,TO_REF_SPEED_LIMIT) ADAS_ATTRIB_FCn(SLOPES) or e.g., ROAD_GEOM_FCn(*) SPEED_LIMITS_FCn(*) Returns: RmeResponse Raises: HEREError\"\"\" data = { 'file' : Utils . get_zipped_base64 ( gpx_file_content ), 'routemode' : route_mode , 'attributes' : ',' . join ( pde_layers ), 'apikey' : self . _api_key } return self . __get ( data )","title":"Route Matching API"},{"location":"api/rme_api/#route-matching-api","text":"","title":"Route Matching API"},{"location":"api/rme_api/#herepy.rme_api","text":"","title":"herepy.rme_api"},{"location":"api/rme_api/#herepy.rme_api.RmeApi","text":"A python interface into the RME API","title":"RmeApi"},{"location":"api/rme_api/#herepy.rme_api.RmeApi.__init__","text":"Returns a RmeApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/rme_api.py 16 17 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a RmeApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( RmeApi , self ) . __init__ ( api_key , timeout ) self . _base_url = 'https://m.fleet.ls.hereapi.com/2/matchroute.json'","title":"__init__()"},{"location":"api/rme_api/#herepy.rme_api.RmeApi.match_route","text":"Retrieves misc information about the route given in gpx file gpxfile content (str): gpx file content as string routemode (str): route mode ('car') pde_layers (str list): PDE layers to retrieve e.g.: ROAD_GEOM_FCn(TUNNEL) SPEED_LIMITS_FCn(FROM_REF_SPEED_LIMIT,TO_REF_SPEED_LIMIT) ADAS_ATTRIB_FCn(SLOPES) or e . g ., ROAD_GEOM_FCn ( * ) SPEED_LIMITS_FCn ( * ) RmeResponse HEREError Source code in herepy/rme_api.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def match_route ( self , gpx_file_content : str , route_mode : str = 'car' , pde_layers : List [ str ] = []): \"\"\"Retrieves misc information about the route given in gpx file Args: gpxfile content (str): gpx file content as string routemode (str): route mode ('car') pde_layers (str list): PDE layers to retrieve e.g.: ROAD_GEOM_FCn(TUNNEL) SPEED_LIMITS_FCn(FROM_REF_SPEED_LIMIT,TO_REF_SPEED_LIMIT) ADAS_ATTRIB_FCn(SLOPES) or e.g., ROAD_GEOM_FCn(*) SPEED_LIMITS_FCn(*) Returns: RmeResponse Raises: HEREError\"\"\" data = { 'file' : Utils . get_zipped_base64 ( gpx_file_content ), 'routemode' : route_mode , 'attributes' : ',' . join ( pde_layers ), 'apikey' : self . _api_key } return self . __get ( data )","title":"match_route()"},{"location":"api/routing_api/","text":"Routing API \u00b6 \u00b6 InvalidCredentialsError \u00b6 Invalid Credentials Error Type. This error is returned if the specified token was invalid or no contract could be found for this token . InvalidInputDataError \u00b6 Invalid Input Data Error Type. This error is returned if the specified request parameters contain invalid data , such as due to wrong parameter syntax or invalid parameter combinations . LinkIdNotFoundError \u00b6 Link Not Found Error Type. This error indicates that a link ID passed as input parameter could not be found in the underlying map data . NoRouteFoundError \u00b6 No Route Found Error Type. This error indicates that no route could be constructed based on the input parameter . RouteNotReconstructedError \u00b6 Route Not Reconstructed Error Type. This error indicates that the RouteId is invalid ( RouteId can not be decoded into valid data ) or route failed to be reconstructed from the RouteId . In every case a mitigation is to re - run CalculateRoute request to acquire a new proper RouteId . RoutingApi \u00b6 A python interface into the HERE Routing API __init__ ( self , api_key = None , timeout = None ) special \u00b6 Returns a RoutingApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/routing_api.py 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a RoutingApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( RoutingApi , self ) . __init__ ( api_key , timeout ) bicycle_route ( self , waypoint_a , waypoint_b , modes = None , departure = 'now' ) \u00b6 Request a bicycle route between two points waypoint_a: array including latitude and longitude in order or string with the location name waypoint_b: array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def bicycle_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a bicycle route between two points Args: waypoint_a: array including latitude and longitude in order or string with the location name waypoint_b: array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . bicycle , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) car_route ( self , waypoint_a , waypoint_b , modes = None , departure = 'now' ) \u00b6 Request a driving route between two points waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def car_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a driving route between two points Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . car , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) intermediate_route ( self , waypoint_a , waypoint_b , waypoint_c , modes = None , departure = 'now' ) \u00b6 Request a intermediate route from three points waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. waypoint_c (array): Last array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def intermediate_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], waypoint_c : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a intermediate route from three points Args: waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. waypoint_c (array): Last array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . car , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) location_near_motorway ( self , waypoint_a , waypoint_b , modes = None , departure = 'now' ) \u00b6 Calculates the fastest car route between two location waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def location_near_motorway ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Calculates the fastest car route between two location Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . car , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) matrix ( self , start_waypoints , destination_waypoints , departure = 'now' , modes = [], summary_attributes = []) \u00b6 Request a matrix of route summaries between M starts and N destinations. start_waypoints (array): array of arrays of coordinates [lat,long] of start waypoints. or array of string with the location names. destination_waypoints (array): array of arrays of coordinates [lat,long] of destination waypoints. or array of string with the location names. departure (str): time when travel is expected to start, e.g.: '2013-07-04T17:00:00+02' modes (array): array of RouteMode enums following [Type, TransportMode, TrafficMode, Feature]. summary_attributes (array): array of MatrixSummaryAttribute enums. RoutingMatrixResponse HEREError: If an error is received from the server. Source code in herepy/routing_api.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def matrix ( self , start_waypoints : Union [ List [ float ], str ], destination_waypoints : Union [ List [ float ], str ], departure : str = 'now' , modes : List [ RouteMode ] = [], summary_attributes : List [ MatrixSummaryAttribute ] = []): \"\"\"Request a matrix of route summaries between M starts and N destinations. Args: start_waypoints (array): array of arrays of coordinates [lat,long] of start waypoints. or array of string with the location names. destination_waypoints (array): array of arrays of coordinates [lat,long] of destination waypoints. or array of string with the location names. departure (str): time when travel is expected to start, e.g.: '2013-07-04T17:00:00+02' modes (array): array of RouteMode enums following [Type, TransportMode, TrafficMode, Feature]. summary_attributes (array): array of MatrixSummaryAttribute enums. Returns: RoutingMatrixResponse Raises: HEREError: If an error is received from the server. \"\"\" data = { 'apikey' : self . _api_key , 'departure' : departure , 'mode' : self . __prepare_mode_values ( modes ), 'summaryAttributes' : ',' . join ([ attribute . __str__ () for attribute in summary_attributes ]) } for i , start_waypoint in enumerate ( start_waypoints ): if isinstance ( start_waypoint , str ): start_waypoint = self . _get_coordinates_for_location_name ( start_waypoint ) data [ 'start' + str ( i )] = self . __array_to_waypoint ( start_waypoint ) for i , destination_waypoint in enumerate ( destination_waypoints ): if isinstance ( destination_waypoint , str ): destination_waypoint = self . _get_coordinates_for_location_name ( destination_waypoint ) data [ 'destination' + str ( i )] = self . __array_to_waypoint ( destination_waypoint ) response = self . __get ( self . URL_CALCULATE_MATRIX , data , RoutingMatrixResponse ) return response pedastrian_route ( self , waypoint_a , waypoint_b , modes = None , departure = 'now' ) \u00b6 Request a pedastrian route between two points waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def pedastrian_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a pedastrian route between two points Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . pedestrian , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) public_transport ( self , waypoint_a , waypoint_b , combine_change , modes = None , departure = 'now' ) \u00b6 Request a public transport route between two points waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 def public_transport ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], combine_change : bool , modes : List [ RouteMode ] = None , departure = 'now' ): \"\"\"Request a public transport route between two points Args: waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . publicTransport , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) public_transport_timetable ( self , waypoint_a , waypoint_b , combine_change , modes = None , departure = None , arrival = None ) \u00b6 Request a public transport route between two points based on timetables waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default None . arrival (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default None . RoutingResponse HEREError Source code in herepy/routing_api.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def public_transport_timetable ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], combine_change : bool , modes : List [ RouteMode ] = None , departure : str = None , arrival : str = None ): \"\"\"Request a public transport route between two points based on timetables Args: waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `None`. arrival (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `None`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . publicTransportTimeTable , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure , arrival ) truck_route ( self , waypoint_a , waypoint_b , modes = None , departure = 'now' ) \u00b6 Calculates the fastest truck route between two location waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 def truck_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Calculates the fastest truck route between two location Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . truck , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure ) WaypointNotFoundError \u00b6 Waypoint not found Error Type. This error indicates that one of the requested waypoints ( start / end or via point ) could not be found in the routing network . error_from_routing_service_error ( json_data ) \u00b6 Return the correct subclass for routing errors Source code in herepy/routing_api.py 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 def error_from_routing_service_error ( json_data ): \"\"\"Return the correct subclass for routing errors\"\"\" if 'subtype' in json_data : subtype = json_data [ 'subtype' ] details = json_data [ 'details' ] if subtype == 'InvalidCredentials' : return InvalidCredentialsError ( details ) if subtype == 'InvalidInputData' : return InvalidInputDataError ( details ) if subtype == 'WaypointNotFound' : return WaypointNotFoundError ( details ) if subtype == 'NoRouteFound' : return NoRouteFoundError ( details ) if subtype == 'LinkIdNotFound' : return LinkIdNotFoundError ( details ) if subtype == 'RouteNotReconstructed' : return RouteNotReconstructedError ( details ) # pylint: disable=W0212 return HEREError ( 'Error occured on ' + sys . _getframe ( 1 ) . f_code . co_name )","title":"Routing API"},{"location":"api/routing_api/#routing-api","text":"","title":"Routing API"},{"location":"api/routing_api/#herepy.routing_api","text":"","title":"herepy.routing_api"},{"location":"api/routing_api/#herepy.routing_api.InvalidCredentialsError","text":"Invalid Credentials Error Type. This error is returned if the specified token was invalid or no contract could be found for this token .","title":"InvalidCredentialsError"},{"location":"api/routing_api/#herepy.routing_api.InvalidInputDataError","text":"Invalid Input Data Error Type. This error is returned if the specified request parameters contain invalid data , such as due to wrong parameter syntax or invalid parameter combinations .","title":"InvalidInputDataError"},{"location":"api/routing_api/#herepy.routing_api.LinkIdNotFoundError","text":"Link Not Found Error Type. This error indicates that a link ID passed as input parameter could not be found in the underlying map data .","title":"LinkIdNotFoundError"},{"location":"api/routing_api/#herepy.routing_api.NoRouteFoundError","text":"No Route Found Error Type. This error indicates that no route could be constructed based on the input parameter .","title":"NoRouteFoundError"},{"location":"api/routing_api/#herepy.routing_api.RouteNotReconstructedError","text":"Route Not Reconstructed Error Type. This error indicates that the RouteId is invalid ( RouteId can not be decoded into valid data ) or route failed to be reconstructed from the RouteId . In every case a mitigation is to re - run CalculateRoute request to acquire a new proper RouteId .","title":"RouteNotReconstructedError"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi","text":"A python interface into the HERE Routing API","title":"RoutingApi"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.__init__","text":"Returns a RoutingApi instance. api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. Source code in herepy/routing_api.py 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , api_key : str = None , timeout : int = None ): \"\"\"Returns a RoutingApi instance. Args: api_key (str): API key taken from HERE Developer Portal. timeout (int): Timeout limit for requests. \"\"\" super ( RoutingApi , self ) . __init__ ( api_key , timeout )","title":"__init__()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.bicycle_route","text":"Request a bicycle route between two points waypoint_a: array including latitude and longitude in order or string with the location name waypoint_b: array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def bicycle_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a bicycle route between two points Args: waypoint_a: array including latitude and longitude in order or string with the location name waypoint_b: array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . bicycle , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"bicycle_route()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.car_route","text":"Request a driving route between two points waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def car_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a driving route between two points Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . car , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"car_route()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.intermediate_route","text":"Request a intermediate route from three points waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. waypoint_c (array): Last array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def intermediate_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], waypoint_c : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a intermediate route from three points Args: waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. waypoint_c (array): Last array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . car , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"intermediate_route()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.location_near_motorway","text":"Calculates the fastest car route between two location waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def location_near_motorway ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Calculates the fastest car route between two location Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . car , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"location_near_motorway()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.matrix","text":"Request a matrix of route summaries between M starts and N destinations. start_waypoints (array): array of arrays of coordinates [lat,long] of start waypoints. or array of string with the location names. destination_waypoints (array): array of arrays of coordinates [lat,long] of destination waypoints. or array of string with the location names. departure (str): time when travel is expected to start, e.g.: '2013-07-04T17:00:00+02' modes (array): array of RouteMode enums following [Type, TransportMode, TrafficMode, Feature]. summary_attributes (array): array of MatrixSummaryAttribute enums. RoutingMatrixResponse HEREError: If an error is received from the server. Source code in herepy/routing_api.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def matrix ( self , start_waypoints : Union [ List [ float ], str ], destination_waypoints : Union [ List [ float ], str ], departure : str = 'now' , modes : List [ RouteMode ] = [], summary_attributes : List [ MatrixSummaryAttribute ] = []): \"\"\"Request a matrix of route summaries between M starts and N destinations. Args: start_waypoints (array): array of arrays of coordinates [lat,long] of start waypoints. or array of string with the location names. destination_waypoints (array): array of arrays of coordinates [lat,long] of destination waypoints. or array of string with the location names. departure (str): time when travel is expected to start, e.g.: '2013-07-04T17:00:00+02' modes (array): array of RouteMode enums following [Type, TransportMode, TrafficMode, Feature]. summary_attributes (array): array of MatrixSummaryAttribute enums. Returns: RoutingMatrixResponse Raises: HEREError: If an error is received from the server. \"\"\" data = { 'apikey' : self . _api_key , 'departure' : departure , 'mode' : self . __prepare_mode_values ( modes ), 'summaryAttributes' : ',' . join ([ attribute . __str__ () for attribute in summary_attributes ]) } for i , start_waypoint in enumerate ( start_waypoints ): if isinstance ( start_waypoint , str ): start_waypoint = self . _get_coordinates_for_location_name ( start_waypoint ) data [ 'start' + str ( i )] = self . __array_to_waypoint ( start_waypoint ) for i , destination_waypoint in enumerate ( destination_waypoints ): if isinstance ( destination_waypoint , str ): destination_waypoint = self . _get_coordinates_for_location_name ( destination_waypoint ) data [ 'destination' + str ( i )] = self . __array_to_waypoint ( destination_waypoint ) response = self . __get ( self . URL_CALCULATE_MATRIX , data , RoutingMatrixResponse ) return response","title":"matrix()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.pedastrian_route","text":"Request a pedastrian route between two points waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def pedastrian_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Request a pedastrian route between two points Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . pedestrian , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"pedastrian_route()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.public_transport","text":"Request a public transport route between two points waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 def public_transport ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], combine_change : bool , modes : List [ RouteMode ] = None , departure = 'now' ): \"\"\"Request a public transport route between two points Args: waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . publicTransport , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"public_transport()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.public_transport_timetable","text":"Request a public transport route between two points based on timetables waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default None . arrival (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default None . RoutingResponse HEREError Source code in herepy/routing_api.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def public_transport_timetable ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], combine_change : bool , modes : List [ RouteMode ] = None , departure : str = None , arrival : str = None ): \"\"\"Request a public transport route between two points based on timetables Args: waypoint_a (array): Starting array including latitude and longitude in order or string with the location name. waypoint_b (array): Intermediate array including latitude and longitude in order or string with the location name. combine_change (bool): Enables the change manuever in the route response, which indicates a public transit line change. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `None`. arrival (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `None`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . publicTransportTimeTable , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure , arrival )","title":"public_transport_timetable()"},{"location":"api/routing_api/#herepy.routing_api.RoutingApi.truck_route","text":"Calculates the fastest truck route between two location waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format yyyy-mm-ddThh:mm:ss . Default now . RoutingResponse HEREError Source code in herepy/routing_api.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 def truck_route ( self , waypoint_a : Union [ List [ float ], str ], waypoint_b : Union [ List [ float ], str ], modes : List [ RouteMode ] = None , departure : str = 'now' ): \"\"\"Calculates the fastest truck route between two location Args: waypoint_a (array): array including latitude and longitude in order or string with the location name. waypoint_b (array): array including latitude and longitude in order or string with the location name. modes (array): array including RouteMode enums. departure (str): Date time str in format `yyyy-mm-ddThh:mm:ss`. Default `now`. Returns: RoutingResponse Raises: HEREError\"\"\" if modes is None : modes = [ RouteMode . truck , RouteMode . fastest ] return self . _route ( waypoint_a , waypoint_b , modes , departure )","title":"truck_route()"},{"location":"api/routing_api/#herepy.routing_api.WaypointNotFoundError","text":"Waypoint not found Error Type. This error indicates that one of the requested waypoints ( start / end or via point ) could not be found in the routing network .","title":"WaypointNotFoundError"},{"location":"api/routing_api/#herepy.routing_api.error_from_routing_service_error","text":"Return the correct subclass for routing errors Source code in herepy/routing_api.py 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 def error_from_routing_service_error ( json_data ): \"\"\"Return the correct subclass for routing errors\"\"\" if 'subtype' in json_data : subtype = json_data [ 'subtype' ] details = json_data [ 'details' ] if subtype == 'InvalidCredentials' : return InvalidCredentialsError ( details ) if subtype == 'InvalidInputData' : return InvalidInputDataError ( details ) if subtype == 'WaypointNotFound' : return WaypointNotFoundError ( details ) if subtype == 'NoRouteFound' : return NoRouteFoundError ( details ) if subtype == 'LinkIdNotFound' : return LinkIdNotFoundError ( details ) if subtype == 'RouteNotReconstructed' : return RouteNotReconstructedError ( details ) # pylint: disable=W0212 return HEREError ( 'Error occured on ' + sys . _getframe ( 1 ) . f_code . co_name )","title":"error_from_routing_service_error()"},{"location":"enums/enums/","text":"Enums \u00b6 \u00b6 MatrixSummaryAttribute \u00b6 Defines an attribute to be included in the route matrix entries PlacesCategory \u00b6 Categories which are used in places api functions. PublicTransitModeType \u00b6 Mode types used in public transit api PublicTransitRoutingMode \u00b6 Routing types used in public transit api PublicTransitSearchMethod \u00b6 Search methods used in public transit search function RouteMode \u00b6 Modes which is used in routing api functions. WeatherProductType \u00b6 Identifis the type of report to obtain.","title":"Enums"},{"location":"enums/enums/#enums","text":"","title":"Enums"},{"location":"enums/enums/#herepy.here_enum","text":"","title":"herepy.here_enum"},{"location":"enums/enums/#herepy.here_enum.MatrixSummaryAttribute","text":"Defines an attribute to be included in the route matrix entries","title":"MatrixSummaryAttribute"},{"location":"enums/enums/#herepy.here_enum.PlacesCategory","text":"Categories which are used in places api functions.","title":"PlacesCategory"},{"location":"enums/enums/#herepy.here_enum.PublicTransitModeType","text":"Mode types used in public transit api","title":"PublicTransitModeType"},{"location":"enums/enums/#herepy.here_enum.PublicTransitRoutingMode","text":"Routing types used in public transit api","title":"PublicTransitRoutingMode"},{"location":"enums/enums/#herepy.here_enum.PublicTransitSearchMethod","text":"Search methods used in public transit search function","title":"PublicTransitSearchMethod"},{"location":"enums/enums/#herepy.here_enum.RouteMode","text":"Modes which is used in routing api functions.","title":"RouteMode"},{"location":"enums/enums/#herepy.here_enum.WeatherProductType","text":"Identifis the type of report to obtain.","title":"WeatherProductType"},{"location":"models/models/","text":"Models \u00b6 \u00b6 DestinationWeatherResponse \u00b6 A class representing the Weather Forecasts for DestinationWeather Api. new_from_jsondict ( data , param_defaults , ** kwargs ) classmethod \u00b6 Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Parameters: Name Type Description Default data dict A JSON dict, as converted from the JSON in the here API. required Source code in herepy/models.py 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 @classmethod def new_from_jsondict ( cls , data , param_defaults , ** kwargs ): \"\"\" Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Args: data (dict): A JSON dict, as converted from the JSON in the here API. \"\"\" json_data = data . copy () if kwargs : for key , val in kwargs . items (): json_data [ key ] = val c = cls ( param_defaults , ** json_data ) c . _json = data return c GeocoderAutoCompleteResponse \u00b6 A class representing the Geocoder Autocomplete Api response data. GeocoderResponse \u00b6 A class representing the Geocoder Api response data. GeocoderReverseResponse \u00b6 A class representing the Geocoder Reverse Api response data. HEREModel \u00b6 Base class from which all here models will inherit. __str__ ( self ) special \u00b6 Returns a string representation of HEREModel. By default this is the same as as_json_string(). Source code in herepy/models.py 9 10 11 12 def __str__ ( self ): \"\"\" Returns a string representation of HEREModel. By default this is the same as as_json_string().\"\"\" return self . as_json_string () as_dict ( self ) \u00b6 Create a dictionary representation of the object. Please see inline comments on construction when dictionaries contain HEREModels. Source code in herepy/models.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def as_dict ( self ): \"\"\" Create a dictionary representation of the object. Please see inline comments on construction when dictionaries contain HEREModels.\"\"\" data = {} for ( key , value ) in self . param_defaults . items (): # If the value is a list, we need to create a list to hold the # dicts created by an object supporting the as_dict() method, # i.e., if it inherits from HEREModel. If the item in the list # doesn't support the as_dict() method, then we assign the value # directly. An example being a list of Media objects contained # within a Status object. if isinstance ( getattr ( self , key , None ), ( list , tuple , set )): data [ key ] = list () for subobj in getattr ( self , key , None ): if getattr ( subobj , 'as_dict' , None ): data [ key ] . append ( subobj . as_dict ()) else : data [ key ] . append ( subobj ) # Not a list, *but still a subclass of HEREModel* and # and we can assign the data[key] directly with the as_dict() # method of the object. An example being a Status object contained # within a User object. elif getattr ( getattr ( self , key , None ), 'as_dict' , None ): data [ key ] = getattr ( self , key ) . as_dict () # If the value doesn't have an as_dict() method, i.e., it's not # something that subclasses HEREModel, then we can use direct # assigment. elif getattr ( self , key , None ): data [ key ] = getattr ( self , key , None ) return data as_json_string ( self ) \u00b6 Returns the HEREModel as a JSON string based on key/value pairs returned from the as_dict() method. Source code in herepy/models.py 20 21 22 23 def as_json_string ( self ): \"\"\" Returns the HEREModel as a JSON string based on key/value pairs returned from the as_dict() method.\"\"\" return json . dumps ( self . as_dict (), sort_keys = True ) new_from_jsondict ( data , ** kwargs ) classmethod \u00b6 Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Parameters: Name Type Description Default data dict A JSON dict, as converted from the JSON in the here API. required Source code in herepy/models.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @classmethod def new_from_jsondict ( cls , data , ** kwargs ): \"\"\" Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Args: data (dict): A JSON dict, as converted from the JSON in the here API. \"\"\" json_data = data . copy () if kwargs : for key , val in kwargs . items (): json_data [ key ] = val c = cls ( ** json_data ) c . _json = data return c PlaceCategoriesResponse \u00b6 A class representing the Places (Search) Api categories response data. PlacesResponse \u00b6 A class representing the Places (Search) Api response data. PlacesSuggestionsResponse \u00b6 A class representing the Places (Search) Api suggestions response data. PublicTransitResponse \u00b6 A class representing the Public Transit Api response data. RmeResponse \u00b6 A class representing the RME (Route Matcher) Api response data. RoutingMatrixResponse \u00b6 A class representing the Routing Api matrix response data. RoutingResponse \u00b6 A class representing the Routing Api response data. TrafficIncidentResponse \u00b6 A class representing the Traffic Incidents on Traffic Api response data.","title":"Models"},{"location":"models/models/#models","text":"","title":"Models"},{"location":"models/models/#herepy.models","text":"","title":"herepy.models"},{"location":"models/models/#herepy.models.DestinationWeatherResponse","text":"A class representing the Weather Forecasts for DestinationWeather Api.","title":"DestinationWeatherResponse"},{"location":"models/models/#herepy.models.DestinationWeatherResponse.new_from_jsondict","text":"Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Parameters: Name Type Description Default data dict A JSON dict, as converted from the JSON in the here API. required Source code in herepy/models.py 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 @classmethod def new_from_jsondict ( cls , data , param_defaults , ** kwargs ): \"\"\" Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Args: data (dict): A JSON dict, as converted from the JSON in the here API. \"\"\" json_data = data . copy () if kwargs : for key , val in kwargs . items (): json_data [ key ] = val c = cls ( param_defaults , ** json_data ) c . _json = data return c","title":"new_from_jsondict()"},{"location":"models/models/#herepy.models.GeocoderAutoCompleteResponse","text":"A class representing the Geocoder Autocomplete Api response data.","title":"GeocoderAutoCompleteResponse"},{"location":"models/models/#herepy.models.GeocoderResponse","text":"A class representing the Geocoder Api response data.","title":"GeocoderResponse"},{"location":"models/models/#herepy.models.GeocoderReverseResponse","text":"A class representing the Geocoder Reverse Api response data.","title":"GeocoderReverseResponse"},{"location":"models/models/#herepy.models.HEREModel","text":"Base class from which all here models will inherit.","title":"HEREModel"},{"location":"models/models/#herepy.models.HEREModel.__str__","text":"Returns a string representation of HEREModel. By default this is the same as as_json_string(). Source code in herepy/models.py 9 10 11 12 def __str__ ( self ): \"\"\" Returns a string representation of HEREModel. By default this is the same as as_json_string().\"\"\" return self . as_json_string ()","title":"__str__()"},{"location":"models/models/#herepy.models.HEREModel.as_dict","text":"Create a dictionary representation of the object. Please see inline comments on construction when dictionaries contain HEREModels. Source code in herepy/models.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def as_dict ( self ): \"\"\" Create a dictionary representation of the object. Please see inline comments on construction when dictionaries contain HEREModels.\"\"\" data = {} for ( key , value ) in self . param_defaults . items (): # If the value is a list, we need to create a list to hold the # dicts created by an object supporting the as_dict() method, # i.e., if it inherits from HEREModel. If the item in the list # doesn't support the as_dict() method, then we assign the value # directly. An example being a list of Media objects contained # within a Status object. if isinstance ( getattr ( self , key , None ), ( list , tuple , set )): data [ key ] = list () for subobj in getattr ( self , key , None ): if getattr ( subobj , 'as_dict' , None ): data [ key ] . append ( subobj . as_dict ()) else : data [ key ] . append ( subobj ) # Not a list, *but still a subclass of HEREModel* and # and we can assign the data[key] directly with the as_dict() # method of the object. An example being a Status object contained # within a User object. elif getattr ( getattr ( self , key , None ), 'as_dict' , None ): data [ key ] = getattr ( self , key ) . as_dict () # If the value doesn't have an as_dict() method, i.e., it's not # something that subclasses HEREModel, then we can use direct # assigment. elif getattr ( self , key , None ): data [ key ] = getattr ( self , key , None ) return data","title":"as_dict()"},{"location":"models/models/#herepy.models.HEREModel.as_json_string","text":"Returns the HEREModel as a JSON string based on key/value pairs returned from the as_dict() method. Source code in herepy/models.py 20 21 22 23 def as_json_string ( self ): \"\"\" Returns the HEREModel as a JSON string based on key/value pairs returned from the as_dict() method.\"\"\" return json . dumps ( self . as_dict (), sort_keys = True )","title":"as_json_string()"},{"location":"models/models/#herepy.models.HEREModel.new_from_jsondict","text":"Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Parameters: Name Type Description Default data dict A JSON dict, as converted from the JSON in the here API. required Source code in herepy/models.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @classmethod def new_from_jsondict ( cls , data , ** kwargs ): \"\"\" Create a new instance based on a JSON dict. Any kwargs should be supplied by the inherited, calling class. Args: data (dict): A JSON dict, as converted from the JSON in the here API. \"\"\" json_data = data . copy () if kwargs : for key , val in kwargs . items (): json_data [ key ] = val c = cls ( ** json_data ) c . _json = data return c","title":"new_from_jsondict()"},{"location":"models/models/#herepy.models.PlaceCategoriesResponse","text":"A class representing the Places (Search) Api categories response data.","title":"PlaceCategoriesResponse"},{"location":"models/models/#herepy.models.PlacesResponse","text":"A class representing the Places (Search) Api response data.","title":"PlacesResponse"},{"location":"models/models/#herepy.models.PlacesSuggestionsResponse","text":"A class representing the Places (Search) Api suggestions response data.","title":"PlacesSuggestionsResponse"},{"location":"models/models/#herepy.models.PublicTransitResponse","text":"A class representing the Public Transit Api response data.","title":"PublicTransitResponse"},{"location":"models/models/#herepy.models.RmeResponse","text":"A class representing the RME (Route Matcher) Api response data.","title":"RmeResponse"},{"location":"models/models/#herepy.models.RoutingMatrixResponse","text":"A class representing the Routing Api matrix response data.","title":"RoutingMatrixResponse"},{"location":"models/models/#herepy.models.RoutingResponse","text":"A class representing the Routing Api response data.","title":"RoutingResponse"},{"location":"models/models/#herepy.models.TrafficIncidentResponse","text":"A class representing the Traffic Incidents on Traffic Api response data.","title":"TrafficIncidentResponse"},{"location":"utils/utils/","text":"Utils \u00b6 \u00b6 Utils \u00b6 Helper class for main api classes build_url ( url , extra_params = None ) staticmethod \u00b6 Builds a url with given parameters which will be used in requests. url (str): base url. extra_params (dict): dictionary of query parameters. A encoded url ready for the request Source code in herepy/utils.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @staticmethod def build_url ( url , extra_params = None ): \"\"\"Builds a url with given parameters which will be used in requests. Args: url (str): base url. extra_params (dict): dictionary of query parameters. Returns: A encoded url ready for the request\"\"\" # Break url into constituent parts ( scheme , netloc , path , params , query , fragment ) = urlparse ( url ) # Add any additional query parameters to the query string params_length = len ( extra_params ) if extra_params and params_length > 0 : extra_query = Utils . encode_parameters ( extra_params ) # Add it to the existing query if query : query += '&' + extra_query else : query = extra_query # Return the rebuilt URL return urlunparse (( scheme , netloc , path , params , query , fragment )) encode_parameters ( parameters ) staticmethod \u00b6 Return a string in key=value&key=value form. Values of None are not included in the output string. parameters (dict): dictionary of query parameters to be converted. A URL-encoded string in \"key=value&key=value\" form Source code in herepy/utils.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 @staticmethod def encode_parameters ( parameters ): \"\"\"Return a string in key=value&key=value form. Values of None are not included in the output string. Args: parameters (dict): dictionary of query parameters to be converted. Returns: A URL-encoded string in \"key=value&key=value\" form \"\"\" if parameters is None : return None if not isinstance ( parameters , dict ): raise HEREError ( \"`parameters` must be a dict.\" ) else : return urlencode ( dict (( k , v ) for k , v in parameters . items () if v is not None ))","title":"Utils"},{"location":"utils/utils/#utils","text":"","title":"Utils"},{"location":"utils/utils/#herepy.utils","text":"","title":"herepy.utils"},{"location":"utils/utils/#herepy.utils.Utils","text":"Helper class for main api classes","title":"Utils"},{"location":"utils/utils/#herepy.utils.Utils.build_url","text":"Builds a url with given parameters which will be used in requests. url (str): base url. extra_params (dict): dictionary of query parameters. A encoded url ready for the request Source code in herepy/utils.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @staticmethod def build_url ( url , extra_params = None ): \"\"\"Builds a url with given parameters which will be used in requests. Args: url (str): base url. extra_params (dict): dictionary of query parameters. Returns: A encoded url ready for the request\"\"\" # Break url into constituent parts ( scheme , netloc , path , params , query , fragment ) = urlparse ( url ) # Add any additional query parameters to the query string params_length = len ( extra_params ) if extra_params and params_length > 0 : extra_query = Utils . encode_parameters ( extra_params ) # Add it to the existing query if query : query += '&' + extra_query else : query = extra_query # Return the rebuilt URL return urlunparse (( scheme , netloc , path , params , query , fragment ))","title":"build_url()"},{"location":"utils/utils/#herepy.utils.Utils.encode_parameters","text":"Return a string in key=value&key=value form. Values of None are not included in the output string. parameters (dict): dictionary of query parameters to be converted. A URL-encoded string in \"key=value&key=value\" form Source code in herepy/utils.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 @staticmethod def encode_parameters ( parameters ): \"\"\"Return a string in key=value&key=value form. Values of None are not included in the output string. Args: parameters (dict): dictionary of query parameters to be converted. Returns: A URL-encoded string in \"key=value&key=value\" form \"\"\" if parameters is None : return None if not isinstance ( parameters , dict ): raise HEREError ( \"`parameters` must be a dict.\" ) else : return urlencode ( dict (( k , v ) for k , v in parameters . items () if v is not None ))","title":"encode_parameters()"}]}